service: boilerx-back # NOTE: update this with your service name

plugins:
  - serverless-webpack
  - serverless-mocha-plugin

custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  role: arn:aws:iam::462630007467:role/boilerx-app-dev-us-east-1-lambdaRole

functions:
  insert_user:
    handler: app/user/create_user.main
    events:
      - http:
          path: user/create
          method: post
          cors: true
          authorizer: aws_iam

  get_current_user:
    handler: app/user/get_current_user.main
    events:
      - http: 
          path: user/current
          method: get
          cors: true
          authorizer: aws_iam

  get_items_popularity:
    handler: app/content/get_items_popularity.main
    events:
      - http:
          path: content/item_pop
          method: get
          cors: true
          authorizer: aws_iam

  get_items_price:
    handler: app/content/get_items_price.main
    events:
      - http:
          path: content/item_price
          method: get
          cors: true
          authorizer: aws_iam      

  get_items:
    handler: app/content/get_item.main
    events:
      - http:
          path: content/
          method: get
          cors: true
          authorizer: aws_iam 
  
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

  # Defines an HTTP API endpoint that calls the main function in create.js
  # path url path is /notes
  # - method POST request
  # - cors enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer authenticate using the AWS IAM role



#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
